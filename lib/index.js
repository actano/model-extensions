// Generated by CoffeeScript 1.7.1
(function() {
  var Model, PostSetAction, capitalizeFirstLetter, getGetterName, getPropertyNameOfSetter, getSetterName, lowercaseFirstLetter, startsWith;

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  lowercaseFirstLetter = function(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
  };

  startsWith = function(candidate, query) {
    return candidate.indexOf(query) === 0;
  };

  getSetterName = function(propertyName) {
    var upperCasePropertyName;
    upperCasePropertyName = capitalizeFirstLetter(propertyName);
    return 'set' + upperCasePropertyName;
  };

  getGetterName = function(propertyName) {
    var upperCasePropertyName;
    upperCasePropertyName = capitalizeFirstLetter(propertyName);
    return 'get' + upperCasePropertyName;
  };

  getPropertyNameOfSetter = function(setterName) {
    return lowercaseFirstLetter(setterName.slice(3));
  };

  Model = function(prototype) {
    var createFromMap, createGetterIfNeeded, createProperty, createSetterIfNeeded, createToMap, listSortedPropertyNames, propertyName, propertyNames, _fn, _i, _len;
    listSortedPropertyNames = function() {
      var propertyKey, propertyNames, propertyValue;
      propertyNames = [];
      for (propertyKey in prototype) {
        propertyValue = prototype[propertyKey];
        if (!(propertyValue instanceof Function)) {
          propertyNames.push(propertyKey.substr(1));
        }
      }
      propertyNames = propertyNames.sort();
      return propertyNames;
    };
    createSetterIfNeeded = function(propertyName) {
      var setterName;
      setterName = getSetterName(propertyName);
      if (!prototype[setterName]) {
        prototype[setterName] = function(value) {
          return this["_" + propertyName] = value;
        };
      }
      return prototype[setterName];
    };
    createGetterIfNeeded = function(propertyName) {
      var getterName;
      getterName = getGetterName(propertyName);
      if (!prototype[getterName]) {
        prototype[getterName] = function(value) {
          return this["_" + propertyName];
        };
      }
      return prototype[getterName];
    };
    createProperty = function(propertyName) {
      return prototype[propertyName] = function(value) {
        if (arguments.length > 0) {
          return this[getSetterName(propertyName)](value);
        } else {
          return this[getGetterName(propertyName)]();
        }
      };
    };
    createFromMap = function() {
      return prototype.fromMap = function(propertyMap) {
        var propertyName, propertyNames, propertyValue, setterName, _i, _len, _results;
        if (propertyMap == null) {
          propertyMap = {};
        }
        propertyNames = listSortedPropertyNames();
        _results = [];
        for (_i = 0, _len = propertyNames.length; _i < _len; _i++) {
          propertyName = propertyNames[_i];
          propertyValue = propertyMap[propertyName];
          setterName = getSetterName(propertyName);
          if (propertyValue != null) {
            _results.push(this[setterName](propertyValue));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    };
    createToMap = function() {
      return prototype.toMap = function() {
        var getterName, propertyMap, propertyName, propertyNames, propertyValue, _i, _len;
        propertyMap = {};
        propertyNames = listSortedPropertyNames();
        for (_i = 0, _len = propertyNames.length; _i < _len; _i++) {
          propertyName = propertyNames[_i];
          getterName = getGetterName(propertyName);
          propertyValue = this[getterName]();
          propertyMap[propertyName] = propertyValue;
        }
        return propertyMap;
      };
    };
    propertyNames = listSortedPropertyNames(prototype);
    _fn = function(propertyName) {
      createGetterIfNeeded(propertyName);
      createSetterIfNeeded(propertyName);
      return createProperty(propertyName);
    };
    for (_i = 0, _len = propertyNames.length; _i < _len; _i++) {
      propertyName = propertyNames[_i];
      _fn(propertyName);
    }
    createFromMap();
    createToMap();
    return prototype;
  };

  PostSetAction = function(prototype, action) {
    var listSetterNames, postExtendSetter, setterName, _fn, _i, _len, _ref;
    listSetterNames = function() {
      var propertyKey, propertyValue, setterNames;
      setterNames = [];
      for (propertyKey in prototype) {
        propertyValue = prototype[propertyKey];
        if (startsWith(propertyKey, "set")) {
          setterNames.push(propertyKey);
        }
      }
      return setterNames;
    };
    postExtendSetter = function(setterName, extension) {
      var originalSetter;
      originalSetter = prototype[setterName];
      return prototype[setterName] = function(newValue) {
        var oldValue, propertyName;
        propertyName = getPropertyNameOfSetter(setterName);
        oldValue = this["_" + propertyName];
        originalSetter.apply(this, [newValue]);
        extension.apply(this, [propertyName, newValue, oldValue]);
        return newValue;
      };
    };
    _ref = listSetterNames();
    _fn = function(setterName) {
      return postExtendSetter(setterName, action);
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      setterName = _ref[_i];
      _fn(setterName);
    }
    return prototype;
  };

  module.exports = {
    Model: Model,
    PostSetAction: PostSetAction
  };

}).call(this);
