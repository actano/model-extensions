// Generated by CoffeeScript 1.9.3
(function() {
  var Model, getGetterName, getSetterName, removeFirstChar, uppercaseFirstChar;

  removeFirstChar = function(string) {
    return string.slice(1);
  };

  uppercaseFirstChar = function(string) {
    return string.charAt(0).toUpperCase() + removeFirstChar(string);
  };

  exports.getSetterName = getSetterName = function(propertyName) {
    return "set" + (uppercaseFirstChar(propertyName));
  };

  exports.getGetterName = getGetterName = function(propertyName) {
    return "get" + (uppercaseFirstChar(propertyName));
  };

  Model = function(prototype) {
    var createFromMap, createFromMapBypassSetters, createGetterIfNeeded, createProperty, createSetterIfNeeded, createToMap, i, len, propertyKey, propertyName, propertyNames, propertyValue;
    propertyNames = (function() {
      var results;
      results = [];
      for (propertyKey in prototype) {
        propertyValue = prototype[propertyKey];
        if (!(propertyValue instanceof Function)) {
          results.push(removeFirstChar(propertyKey));
        }
      }
      return results;
    })();
    propertyNames = propertyNames.sort();
    createSetterIfNeeded = function(propertyName) {
      var name;
      return prototype[name = getSetterName(propertyName)] != null ? prototype[name] : prototype[name] = function(value) {
        return this["_" + propertyName] = value;
      };
    };
    createGetterIfNeeded = function(propertyName) {
      var name;
      return prototype[name = getGetterName(propertyName)] != null ? prototype[name] : prototype[name] = function(value) {
        return this["_" + propertyName];
      };
    };
    createProperty = function(propertyName) {
      return prototype[propertyName] = function(value) {
        if (arguments.length > 0) {
          return this[getSetterName(propertyName)](value);
        } else {
          return this[getGetterName(propertyName)]();
        }
      };
    };
    createFromMap = function() {
      return prototype.fromMap = function(propertyMap) {
        var i, len, propertyName, results;
        if (propertyMap == null) {
          propertyMap = {};
        }
        results = [];
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          if (propertyName in propertyMap) {
            results.push(this[getSetterName(propertyName)](propertyMap[propertyName]));
          }
        }
        return results;
      };
    };
    createToMap = function() {
      return prototype.toMap = function() {
        var i, len, propertyMap, propertyName;
        propertyMap = {};
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          propertyMap[propertyName] = this[getGetterName(propertyName)]();
        }
        return propertyMap;
      };
    };
    createFromMapBypassSetters = function() {
      return prototype.fromMapBypassSetters = function(propertyMap) {
        var i, len, propertyName, results;
        if (propertyMap == null) {
          propertyMap = {};
        }
        results = [];
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          if (propertyName in propertyMap) {
            results.push(this["_" + propertyName] = propertyMap[propertyName]);
          }
        }
        return results;
      };
    };
    for (i = 0, len = propertyNames.length; i < len; i++) {
      propertyName = propertyNames[i];
      createGetterIfNeeded(propertyName);
      createSetterIfNeeded(propertyName);
      createProperty(propertyName);
    }
    createFromMap();
    createToMap();
    createFromMapBypassSetters();
    return prototype;
  };

  exports.Model = Model;

}).call(this);
