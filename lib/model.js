// Generated by CoffeeScript 1.9.2
(function() {
  var Model, getGetterName, getSetterName, removeFirstChar, uppercaseFirstChar;

  uppercaseFirstChar = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  getSetterName = function(propertyName) {
    var upperCasePropertyName;
    upperCasePropertyName = uppercaseFirstChar(propertyName);
    return 'set' + upperCasePropertyName;
  };

  getGetterName = function(propertyName) {
    var upperCasePropertyName;
    upperCasePropertyName = uppercaseFirstChar(propertyName);
    return 'get' + upperCasePropertyName;
  };

  removeFirstChar = function(string) {
    return string.slice(1);
  };

  Model = function(prototype) {
    var createFromMap, createFromMapBypassSetters, createGetterIfNeeded, createProperty, createSetterIfNeeded, createToMap, fn, i, len, listSortedPropertyNames, propertyName, propertyNames;
    listSortedPropertyNames = function() {
      var propertyKey, propertyNames, propertyValue;
      propertyNames = [];
      for (propertyKey in prototype) {
        propertyValue = prototype[propertyKey];
        if (!(propertyValue instanceof Function)) {
          propertyNames.push(removeFirstChar(propertyKey));
        }
      }
      propertyNames = propertyNames.sort();
      return propertyNames;
    };
    createSetterIfNeeded = function(propertyName) {
      var setterName;
      setterName = getSetterName(propertyName);
      if (!prototype[setterName]) {
        prototype[setterName] = function(value) {
          return this["_" + propertyName] = value;
        };
      }
      return prototype[setterName];
    };
    createGetterIfNeeded = function(propertyName) {
      var getterName;
      getterName = getGetterName(propertyName);
      if (!prototype[getterName]) {
        prototype[getterName] = function(value) {
          return this["_" + propertyName];
        };
      }
      return prototype[getterName];
    };
    createProperty = function(propertyName) {
      return prototype[propertyName] = function(value) {
        if (arguments.length > 0) {
          return this[getSetterName(propertyName)](value);
        } else {
          return this[getGetterName(propertyName)]();
        }
      };
    };
    createFromMap = function() {
      return prototype.fromMap = function(propertyMap) {
        var i, len, propertyName, propertyNames, propertyValue, setterName;
        if (propertyMap == null) {
          propertyMap = {};
        }
        propertyNames = listSortedPropertyNames();
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          if (propertyName in propertyMap) {
            propertyValue = propertyMap[propertyName];
            setterName = getSetterName(propertyName);
            this[setterName](propertyValue);
          }
        }
      };
    };
    createToMap = function() {
      return prototype.toMap = function() {
        var getterName, i, len, propertyMap, propertyName, propertyNames, propertyValue;
        propertyMap = {};
        propertyNames = listSortedPropertyNames();
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          getterName = getGetterName(propertyName);
          propertyValue = this[getterName]();
          propertyMap[propertyName] = propertyValue;
        }
        return propertyMap;
      };
    };
    createFromMapBypassSetters = function() {
      return prototype.fromMapBypassSetters = function(propertyMap) {
        var i, len, propertyName, propertyNames, propertyValue;
        if (propertyMap == null) {
          propertyMap = {};
        }
        propertyNames = listSortedPropertyNames();
        for (i = 0, len = propertyNames.length; i < len; i++) {
          propertyName = propertyNames[i];
          if (propertyName in propertyMap) {
            propertyValue = propertyMap[propertyName];
            this["_" + propertyName] = propertyValue;
          }
        }
      };
    };
    propertyNames = listSortedPropertyNames(prototype);
    fn = function(propertyName) {
      createGetterIfNeeded(propertyName);
      createSetterIfNeeded(propertyName);
      return createProperty(propertyName);
    };
    for (i = 0, len = propertyNames.length; i < len; i++) {
      propertyName = propertyNames[i];
      fn(propertyName);
    }
    createFromMap();
    createToMap();
    createFromMapBypassSetters();
    return prototype;
  };

  module.exports.Model = Model;

}).call(this);
